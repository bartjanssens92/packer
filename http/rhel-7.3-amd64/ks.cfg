#########################################################################
# This file has been autogenerated by the make_ks.sh script       #
# DO NOT EDIT MANUALLY!                                           #
#########################################################################
###{1 Global Settings
## Specify the default installation mode.
install
text
##
## Keyboard layout
lang en_US.UTF-8
keyboard us
##
## Set network
network --bootproto=dhcp
firewall --port=22:tcp
##

## Set rootpassword. Hash password with openssl passwd -1
rootpw vagrant
user --name=vagrant --homedir=/home/vagrant --password=vagrant --shell=/bin/bash --uid=900 --groups wheel
##

## Specify the firewall configuration
firewall --disabled
##
## Selinux
selinux --disabled
##
## Timezone
timezone --utc Europe/Brussels
##

## authconfig
authconfig --enableshadow --enablemd5
##

## Setup bootloader password. Create hash with grub2-mkpasswd-pbkdf2
bootloader --location=mbr --iscrypted --password=grub.pbkdf2.sha512.10000.9677790DF6D0101A03A79A0BC8DCECAA7910CE686AEC555EFE481295A4F39F4F1F9DA05DC6DF660C15EFA31A5F1A98F8A2E25B6141542B25750ED831CDDAFEFA.D97D12334434014D9E0671C3CAF00020DDD354367142C83F73BE55698BB365F07A2F4838E279234D1FAEE98D2C585B993EED4E8F07875043AEF860C04C596AF3

## Partition clearing information
clearpart --all --initlabel
##

## zerombr
#Any invalid partition tables found on disks are initialized. This
#destroys all of the contents of disks with invalid partition tables. This command is required
#when performing an unattended installation on a system with previously initialized disks.
zerombr
##

# Services
# Modifies the default set of services that will run under the default runlevel.
# The list of disabled services is processed before the list of enabled services. Therefore, if a service appears on both lists, it is enabled.
services --enabled vmtoolsd

## Boot partition
part /boot --fstype xfs --label=boot--size=500 --asprimary --ondisk=sda
##
## Create Phisycal volume
part pv.3 --size=100 --grow --asprimary --ondisk=sda
##
## Create rootvg on phisycal volume
volgroup rootvg pv.3
##
## Create logical volumes in rootvg
logvol /tmp --fstype xfs --name=tmp --vgname=rootvg --size=1024
logvol /export/home_cgk --fstype xfs --name=home_cgk --vgname=rootvg --size=1024
logvol / --fstype xfs --name=root --vgname=rootvg --size=2048
logvol /opt --fstype xfs --name=opt --vgname=rootvg --size=2048
logvol /export/home --fstype xfs --name=home --vgname=rootvg --size=1024
logvol /var/adm/crash --fstype xfs --name=crash --vgname=rootvg --size=5120
logvol /var --fstype xfs --name=var --vgname=rootvg --size=3072
logvol /usr --fstype xfs --name=usr --vgname=rootvg --size=5120
logvol swap --fstype swap --name=swap --vgname=rootvg --size=2048
##
%pre
###{3 Hostname
echo "Configuring hostname."
hostname=`cat /proc/cmdline | awk -F"hostname=" '{print $2}' | awk '{print $1}'`
###}3
%end
###{1 Packages
%packages
## Core and Base groups are always selected by default, so it is not necessary to specify them in the %packages section.
#@base   
#@core
@network-file-system-client
python-dmidecode
yum-plugin-downloadonly
dos2unix 
#unix2dos - not available in package list
xorg-x11-xauth
screen
mtr # includes ping and traceroute
tcpdump 
ksh
device-mapper-multipath
vim-minimal
vim-enhanced
vim-common
autofs
yum-utils
open-vm-tools
ed
net-snmp
wget
bash-completion
rsync
sysstat
-acpid
-mlocate
-rng-tools
-biosdevname
-dmraid
-hunspell-en
-tcsh
-abrt-cli
-microcode_ctl
-systemtap-runtime
-fprintd-pam
-abrt-plugin-sosreport
-dosfstools
-smartmontools
-prelink
-unzip
-rfkill
-blktrace
-pinfo
-rdate
-Red_Hat_Enterprise_Linux-Release_Notes-7-en-US
-words
-abrt-addon-kerneloops
-setuptool
-pm-utils
-abrt-addon-ccpp
-bridge-utils
-nano
-strace
-hunspell
-abrt-addon-python
-samba-client
-nfs4-acl-tools
-cifs-utils
%end
###}1
###{1 Post Configuration
%post --nochroot
hostname=`cat /proc/cmdline | awk -F"hostname=" '{print $2}' | awk '{print $1}'`
if [ "$hostname" != "" ]; then
  hostnamectl set-hostname ${hostname}
  hostnamectl --pretty set-hostname ${hostname}
  cp /etc/hostname /mnt/sysimage/etc/hostname
  cp /etc/machine-info /mnt/sysimage/etc/machine-info
fi
%end
%post
###{2 Prepare post configuration environment
## Change to 3th tty for more debugging
exec < /dev/tty3 > /dev/tty3
chvt 3
###}2
###{2 Parsing cmdline options
echo "Parsing cmdline options."
hostname=`cat /proc/cmdline | awk -F"hostname=" '{print $2}' | awk '{print $1}'`
ksdevice=`cat /proc/cmdline | awk -F"ksdevice=" '{print $2}' | awk '{print $1}'`
vmnic=`cat /proc/cmdline | awk -F"vmnic=" '{print $2}' | awk '{print $1}'`
key=`cat /proc/cmdline | awk -F"key=" '{print $2}' | awk '{print $1}'`
location=`cat /proc/cmdline | awk -F"location=" '{print $2}' | awk '{print $1}'`
package=`cat /proc/cmdline | awk -F"package=" '{print $2}' | awk '{print $1}'`
###}2
mkdir -m 700 /root/.ssh/

###{3 VMnic
echo "Configuring vmnic."
if [ "$vmnic" == "yes" ]; then
  mv /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-vmnic0;
  sed -i 's/eth0/vmnic0/g' /etc/sysconfig/network-scripts/ifcfg-vmnic0;
  sed -i '/NAME=/a\DEVICE="vmnic0"' /etc/sysconfig/network-scripts/ifcfg-vmnic0
  ksdevice="vmnic0"
fi
###}3

###{3 Yum repo setting for kickstart install
sed -i "s/enabled = 1/enabled = 0/" /etc/yum/pluginconf.d/rhnplugin.conf
###}3

###{3 Configure dump and fsck params
sed -i 's/\(\/dev\/mapper\/rootvg-root *\/ *xfs *defaults *\)0 0/\1 1 1/' /etc/fstab
sed -i 's/\(.*\/boot *xfs *defaults *\)0 0/\1 1 2/' /etc/fstab
sed -i 's/\(\/dev\/mapper\/rootvg-home *\/export\/home *xfs *defaults *\)0 0/\1 1 2/' /etc/fstab
sed -i 's/\(\/dev\/mapper\/rootvg-home_cgk *\/export\/home_cgk *xfs *defaults *\)0 0/\1 1 2/' /etc/fstab
sed -i 's/\(\/dev\/mapper\/rootvg-opt *\/opt *xfs *defaults *\)0 0/\1 1 2/' /etc/fstab
sed -i 's/\(\/dev\/mapper\/rootvg-tmp *\/tmp *xfs *defaults *\)0 0/\1 1 2/' /etc/fstab
sed -i 's/\(\/dev\/mapper\/rootvg-usr *\/usr *xfs *defaults *\)0 0/\1 1 2/' /etc/fstab
sed -i 's/\(\/dev\/mapper\/rootvg-var *\/var *xfs *defaults *\)0 0/\1 1 2/' /etc/fstab
sed -i 's/\(\/dev\/mapper\/rootvg-crash *\/var\/adm\/crash *xfs *defaults *\)0 0/\1 1 2/' /etc/fstab
###}3
###{3 noexec,nodev,nosuid
sed -i 's/\(\/dev\/mapper\/rootvg-home *\/export\/home *xfs *\)\(defaults\)\(.*\)/\1defaults,noexec,nodev,nosuid\3/' /etc/fstab
sed -i 's/\(\/dev\/mapper\/rootvg-tmp *\/tmp *xfs *\)\(defaults\)\(.*\)/\1defaults,noexec,nodev,nosuid\3/' /etc/fstab
sed -i 's/\(tmpfs *\/dev\/shm *tmpfs *\)\(defaults\)\(.*\)/\1defaults,noexec,nodev,nosuid\3/' /etc/fstab
###}3

###{3 File Permissions
/bin/chmod 400 /etc/shadow
/bin/chmod 400 /etc/gshadow
###}3

### THE END ###
echo "Server will reboot in 2 seconds"
cat  /proc/cmdline > /var/tmp/cmdline
sleep 2
%end
## Reboot server.
reboot
